# -*- coding: utf-8 -*-
"""
This code was auto-generated by Amua (https://github.com/zward/Amua)
Code generated: Sat May 31 23:05:33 JST 2025
Model name: S3_model_pancreatic_cancer
Model type: Markov Model
Simulation type: Monte Carlo
Created by: takuh
Created: Sat May 24 17:25:15 GMT+09:00 2025
Version created: 0.3.2
Modified by: takuh
Modified: Sun May 25 23:05:36 GMT+09:00 2025
Version modified: 0.3.2
"""
import csv
import numpy as np

#Define MarkovTrace class
class MarkovTrace:
    "MarkovTrace class"
    name=""
    numStates=0
    numCols=0
    
    def __init__(self,name,stateNames):
        self.name=name
        self.numStates=len(stateNames)
        self.headers=[]
        self.headers.append("Cycle")
        for s in range(0,self.numStates):
            self.headers.append(stateNames[s])
        self.headers.append("Cycle_Cost")
        self.headers.append("Cum_Cost")
        self.headers.append("Cycle_Dis_Cost")
        self.headers.append("Cum_Dis_Cost")
        self.headers.append("Cycle_QALY")
        self.headers.append("Cum_QALY")
        self.headers.append("Cycle_Dis_QALY")
        self.headers.append("Cum_Dis_QALY")
        self.numCols=len(self.headers)
        self.data=[]
    
    def update(self,prev, Cost, Cost_dis, QALY, QALY_dis):
        row=np.zeros(self.numCols)
        cycle=len(self.data)
        if(cycle>0): prevRow=self.data[cycle-1]
        row[0]=cycle
        col=1
        for s in range(0,len(prev)):
            row[col]=prev[s]
            col+=1
        #cycle reward
        row[col]=Cost
        col+=1
        #cum reward
        row[col]=Cost
        if(cycle>0): row[col]+=prevRow[col]
        col+=1
        #discounted cycle reward
        row[col]=Cost_dis
        col+=1
        #discounted cum reward
        row[col]=Cost_dis
        if(cycle>0): row[col]+=prevRow[col]
        col+=1
        #cycle reward
        row[col]=QALY
        col+=1
        #cum reward
        row[col]=QALY
        if(cycle>0): row[col]+=prevRow[col]
        col+=1
        #discounted cycle reward
        row[col]=QALY_dis
        col+=1
        #discounted cum reward
        row[col]=QALY_dis
        if(cycle>0): row[col]+=prevRow[col]
        col+=1
        self.data.append(row)
    
    def applyHalfCycle(self):
        row=self.data[-1] #last row
        col=self.numStates+1
        half=row[col]*0.5
        #cycle reward
        row[col]=half
        col+=1
        #cum reward
        row[col]-=half
        col+=1
        half=row[col]*0.5
        #discounted cycle reward
        row[col]=half
        col+=1
        #discounted cum reward
        row[col]-=half
        col+=2
        half=row[col]*0.5
        #cycle reward
        row[col]=half
        col+=1
        #cum reward
        row[col]-=half
        col+=1
        half=row[col]*0.5
        #discounted cycle reward
        row[col]=half
        col+=1
        #discounted cum reward
        row[col]-=half
        col+=2
    
    def getValue(self,t,col):
        if(isinstance(col,int)): #integer
            val=self.data[t][col]
            return(val)
        else: #string
            val=self.data[t][self.headers.index(col)]
            return(val)
    
    def writeCSV(self):
        dir="/home/yufujimoto/Documents/Documents/Projects/生成系AI/LocalLLM/webui/modules/decisiontree/sample/model/S3_model_pancreatic_cancer_Export/"
        with open(dir+self.name+'_Trace.csv', mode='w', newline='') as trace_file:
            trace_writer=csv.writer(trace_file)
            trace_writer.writerow(self.headers) #headers
            for i in range(0,len(self.data)):
                trace_writer.writerow(self.data[i])
    

