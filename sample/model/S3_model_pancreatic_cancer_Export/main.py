# -*- coding: utf-8 -*-
"""
This code was auto-generated by Amua (https://github.com/zward/Amua)
Code generated: Sat May 31 23:05:33 JST 2025
Model name: S3_model_pancreatic_cancer
Model type: Markov Model
Simulation type: Monte Carlo
Created by: takuh
Created: Sat May 24 17:25:15 GMT+09:00 2025
Version created: 0.3.2
Modified by: takuh
Modified: Sun May 25 23:05:36 GMT+09:00 2025
Version modified: 0.3.2
"""

import csv
import math
import numpy as np
from Table import Table
from Table import CubicSpline
from MarkovTrace import MarkovTrace
import functions as fx

#Define inner class
class Person:
    #Attributes
    state=-1
    timeSick=0
    timeChemo=0
    pProg=0
    pDie=0
    pTreat=0
    pResponse=0
    mSDQ=0
    mPDQ=0
    mCSD=0
    mCPD=0
    mtreatCost_Chemo=0
    mtreatCost_Surgery=0
    pProg3=0
    pDie3=0
    mtreatCost_Chemo_3=0
    pResponse_3=0
    pResponse_2=0


#Define tables
folder="/home/yufujimoto/Documents/Documents/Projects/生成系AI/LocalLLM/webui/modules/decisiontree/sample/model/S3_model_pancreatic_cancer_Export/\\";
lifetable=Table("lifetable","Lookup","Truncate","null","null","null",10, 2, folder+"lifetable.csv");

#Define parameters
rate1=0.1 #Expression: 0.1
rate2=0.05 #Expression: 0.05
rate3=0.1 #Expression: 0.1
pTreated1_4=0.7 #Expression: 0.7
pResponse1_5=0.6 #Expression: 0.6
rate6=0.2 #Expression: 0.2
pResponse2_8=0.4 #Expression: 0.4
pTreated2_7=0.5 #Expression: 0.5


#Initialize discount rates
startDiscountCycle=0
discountRates=np.ones(2)
halfCycle=False

########## Markov Chain: Average Treatment ##########
print("Running Markov Chain: Average Treatment ")
np.random.seed(999) #seed RNG
numStates=7
stateNames=["1stSD","1stPD","Death","2ndSD","2ndPD","1stTreated","2ndTreated"]
trace=MarkovTrace("Average Treatment",stateNames) #initialize trace

#Initialize prevalence
initPrev=[0.15,0.85,0,0,0,0,0]
cumPrev=np.zeros(numStates)
cumPrev[0]=initPrev[0]
for s in range(1,numStates):
    cumPrev[s]=cumPrev[s-1]+initPrev[s]

numPeople=1000
people=[Person() for i in range(numPeople)]
for p in range(0,numPeople):
    curPerson=people[p]
    rand=np.random.rand()
    k=0
    while(rand>initPrev[k]): k+=1
    people[p].state=k
    #Initialize variables
    people[p].timeSick=0
    people[p].timeChemo=0
    people[p].pProg=0.1
    people[p].pDie=0.05
    people[p].pTreat=0.7
    people[p].pResponse=0.6
    people[p].mSDQ=(Unif(0.3,0.7,~)/12
    people[p].mPDQ=(Unif(0,0.15,~)/12
    people[p].mCSD=(Unif(1000000,2000000,~)/12
    people[p].mCPD=(Unif(2500000,4000000,~)/12
    people[p].mtreatCost_Chemo=1000000
    people[p].mtreatCost_Surgery=3500000
    people[p].pProg3=0.05
    people[p].pDie3=0.015
    people[p].mtreatCost_Chemo_3=40000000
    people[p].pResponse_3=0.8
    people[p].pResponse_2=0.4

#Run chain
#Initialize outcomes
AverageTreatment_Cost=0
AverageTreatment_Dis_Cost=0
AverageTreatment_QALY=0
AverageTreatment_Dis_QALY=0
t=0 #initialize cycle
terminate=False
while(terminate==False):
    #update progress
    if(t%10==0): print(t,end="")
    else: print('.',end="")
    
    #Cycle outcomes
    prev=np.zeros(numStates)
    cycleCost=0
    cycleCost_dis=0
    cycleQALY=0
    cycleQALY_dis=0
    
    #Update each person
    for p in range(0,numPeople):
        curPerson=people[p]
        curState=curPerson.state
        prev[curState]+=1 #record prevalence
        if(curState==0): #1stSD
            #Update rewards
            cycleCost+=0
            cycleQALY+=curPerson.mSDQ
            #Calculate child probs
            childProbs=np.zeros(3)
            childProbs[1]=childProbs[0]+curPerson.pDie #Prob Background Mortality
            childProbs[2]=childProbs[1]+curPerson.pProg #Prob PD
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[1]): #Background Mortality
                curPerson.state=2 #Transition to Death
            #end Background Mortality
            elif(rand<childProbs[2]): #PD
                curPerson.state=1 #Transition to 1stPD
            #end PD
            else: #SD
                curPerson.state=0 #Transition to 1stSD
            #end SD
        elif(curState==1): #1stPD
            #Update rewards
            cycleCost+=fx.ifElse(curPerson.timeChemo>=1,curPerson.mCPD+curPerson.mtreatCost_Chemo,curPerson.mCPD)
            cycleQALY+=curPerson.mPDQ
            #Update variables
            curPerson.timeSick++ #Orig: timeSick++
            #Calculate child probs
            childProbs=np.zeros(2)
            childProbs[0]=curPerson.pDie*2 #Prob Background Mortality
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[0]): #Background Mortality
                curPerson.state=2 #Transition to Death
            #end Background Mortality
            else: #Survive
                #Calculate child probs
                childProbs=np.zeros(2)
                childProbs[1]=childProbs[0]+curPerson.pTreat #Prob treated
                #Sample event
                rand=np.random.rand()
                if(rand<childProbs[1]): #treated
                    curPerson.state=5 #Transition to 1stTreated
                #end treated
                else: #1stPD
                    curPerson.state=1 #Transition to 1stPD
                #end 1stPD
            #end Survive
        elif(curState==2): #Death
            #Update rewards
            cycleCost+=0
            cycleQALY+=0
            #Calculate child probs
            childProbs=np.zeros(1)
            childProbs[0]=1.0 #Prob Death
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[0]): #Death
                curPerson.state=2 #Transition to Death
            #end Death
        elif(curState==3): #2ndSD
            #Update rewards
            cycleCost+=fx.ifElse(curPerson.timeChemo>=1,curPerson.mCSD+curPerson.mtreatCost_Chemo,curPerson.mCSD)
            cycleQALY+=curPerson.mSDQ
            #Calculate child probs
            childProbs=np.zeros(2)
            childProbs[1]=childProbs[0]+curPerson.pDie #Prob Backrgound Mortality
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[1]): #Backrgound Mortality
                curPerson.state=2 #Transition to Death
            #end Backrgound Mortality
            else: #Survive
                #Calculate child probs
                childProbs=np.zeros(2)
                childProbs[1]=childProbs[0]+curPerson.pProg #Prob 2ndPD
                #Sample event
                rand=np.random.rand()
                if(rand<childProbs[1]): #2ndPD
                    curPerson.state=4 #Transition to 2ndPD
                #end 2ndPD
                else: #2ndSD
                    curPerson.state=3 #Transition to 2ndSD
                #end 2ndSD
            #end Survive
        elif(curState==4): #2ndPD
            #Update rewards
            cycleCost+=fx.ifElse(curPerson.timeChemo>=1,curPerson.mCPD+curPerson.mtreatCost_Chemo,curPerson.mCPD)
            cycleQALY+=curPerson.mPDQ
            #Update variables
            curPerson.timeSick++ #Orig: timeSick++
            #Calculate child probs
            childProbs=np.zeros(2)
            childProbs[1]=childProbs[0]+curPerson.pDie*2 #Prob Background Mortality
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[1]): #Background Mortality
                curPerson.state=2 #Transition to Death
            #end Background Mortality
            else: #Survive
                #Calculate child probs
                childProbs=np.zeros(2)
                childProbs[1]=childProbs[0]+curPerson.pTreat*0.8 #Prob treated
                #Sample event
                rand=np.random.rand()
                if(rand<childProbs[1]): #treated
                    curPerson.state=6 #Transition to 2ndTreated
                #end treated
                else: #notTreated
                    curPerson.state=4 #Transition to 2ndPD
                #end notTreated
            #end Survive
        elif(curState==5): #1stTreated
            #Update rewards
            cycleCost+=curPerson.mtreatCost_Chemo+curPerson.mtreatCost_Surgery
            cycleQALY+=0
            #Update variables
            curPerson.timeChemo++ #Orig: timeChemo++
            #Calculate child probs
            childProbs=np.zeros(2)
            childProbs[1]=childProbs[0]+curPerson.pResponse #Prob Probability of response
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[1]): #Probability of response
                curPerson.state=3 #Transition to 2ndSD
            #end Probability of response
            else: #Non response
                curPerson.state=1 #Transition to 1stPD
            #end Non response
        elif(curState==6): #2ndTreated
            #Update rewards
            cycleCost+=curPerson.mtreatCost_Chemo
            cycleQALY+=0
            #Update variables
            curPerson.timeChemo++ #Orig: timeChemo++
            #Calculate child probs
            childProbs=np.zeros(2)
            childProbs[1]=childProbs[0]+curPerson.pResponse*(2/3) #Prob Probability of Response
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[1]): #Probability of Response
                curPerson.state=3 #Transition to 2ndSD
            #end Probability of Response
            else: #Nonresponse
                curPerson.state=4 #Transition to 2ndPD
            #end Nonresponse
    #end person foor loop
    
    #Update outcomes
    discount=1.0
    if(t>=startDiscountCycle): discount=1/((1+discountRates[0])**(t-startDiscountCycle+1))
    cycleCost_dis=cycleCost*discount
    if(t==0 and halfCycle): #half-cycle correction
        cycleCost*=0.5
        cycleCost_dis*=0.5
    AverageTreatment_Cost+=cycleCost
    AverageTreatment_Dis_Cost+=cycleCost_dis
    discount=1.0
    if(t>=startDiscountCycle): discount=1/((1+discountRates[1])**(t-startDiscountCycle+1))
    cycleQALY_dis=cycleQALY*discount
    if(t==0 and halfCycle): #half-cycle correction
        cycleQALY*=0.5
        cycleQALY_dis*=0.5
    AverageTreatment_QALY+=cycleQALY
    AverageTreatment_Dis_QALY+=cycleQALY_dis
    
    #Update trace
    trace.update(prev, cycleCost, cycleCost_dis, cycleQALY, cycleQALY_dis)
    
    #Check termination condition
    terminate = (t==10)
    if(terminate and halfCycle): #half cycle-correction, update last trace row
        trace.applyHalfCycle()
        #Update cum rewards
        AverageTreatment_Cost-=cycleCost*0.5;
        AverageTreatment_Dis_Cost-=cycleCost_dis*0.5;
        AverageTreatment_QALY-=cycleQALY*0.5;
        AverageTreatment_Dis_QALY-=cycleQALY_dis*0.5;
    
    t+=1 #next cycle
    
#end cycle while loop
trace.writeCSV() #write trace
print("done!",sep="")

#Report totals
print("Cost:",AverageTreatment_Cost)
print("Cost (Discounted):",AverageTreatment_Dis_Cost)
print("QALY:",AverageTreatment_QALY)
print("QALY (Discounted):",AverageTreatment_Dis_QALY)
print("")

########## Markov Chain: mFFX ##########
print("Running Markov Chain: mFFX ")
np.random.seed(999) #seed RNG
numStates=7
stateNames=["1stSD","1stPD","Death","2ndSD","2ndPD","1stTreated","2ndTreated"]
trace=MarkovTrace("mFFX",stateNames) #initialize trace

#Initialize prevalence
initPrev=[0.15,0.85,0,0,0,0,0]
cumPrev=np.zeros(numStates)
cumPrev[0]=initPrev[0]
for s in range(1,numStates):
    cumPrev[s]=cumPrev[s-1]+initPrev[s]

numPeople=1000
people=[Person() for i in range(numPeople)]
for p in range(0,numPeople):
    curPerson=people[p]
    rand=np.random.rand()
    k=0
    while(rand>initPrev[k]): k+=1
    people[p].state=k
    #Initialize variables
    people[p].timeSick=0
    people[p].timeChemo=0
    people[p].pProg=0.1
    people[p].pDie=0.05
    people[p].pTreat=0.7
    people[p].pResponse=0.6
    people[p].mSDQ=(Unif(0.3,0.7,~)/12
    people[p].mPDQ=(Unif(0,0.15,~)/12
    people[p].mCSD=(Unif(1000000,2000000,~)/12
    people[p].mCPD=(Unif(2500000,4000000,~)/12
    people[p].mtreatCost_Chemo=1000000
    people[p].mtreatCost_Surgery=3500000
    people[p].pProg3=0.05
    people[p].pDie3=0.015
    people[p].mtreatCost_Chemo_3=40000000
    people[p].pResponse_3=0.8
    people[p].pResponse_2=0.4

#Run chain
#Initialize outcomes
mFFX_Cost=0
mFFX_Dis_Cost=0
mFFX_QALY=0
mFFX_Dis_QALY=0
t=0 #initialize cycle
terminate=False
while(terminate==False):
    #update progress
    if(t%10==0): print(t,end="")
    else: print('.',end="")
    
    #Cycle outcomes
    prev=np.zeros(numStates)
    cycleCost=0
    cycleCost_dis=0
    cycleQALY=0
    cycleQALY_dis=0
    
    #Update each person
    for p in range(0,numPeople):
        curPerson=people[p]
        curState=curPerson.state
        prev[curState]+=1 #record prevalence
        if(curState==0): #1stSD
            #Update rewards
            cycleCost+=0
            cycleQALY+=curPerson.mSDQ
            #Calculate child probs
            childProbs=np.zeros(3)
            childProbs[1]=childProbs[0]+curPerson.pDie #Prob Background Mortality
            childProbs[2]=childProbs[1]+curPerson.pProg #Prob PD
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[1]): #Background Mortality
                curPerson.state=2 #Transition to Death
            #end Background Mortality
            elif(rand<childProbs[2]): #PD
                curPerson.state=1 #Transition to 1stPD
            #end PD
            else: #SD
                curPerson.state=0 #Transition to 1stSD
            #end SD
        elif(curState==1): #1stPD
            #Update rewards
            cycleCost+=fx.ifElse(curPerson.timeChemo>=1,curPerson.mCPD+curPerson.mtreatCost_Chemo,curPerson.mCPD)
            cycleQALY+=curPerson.mPDQ
            #Update variables
            curPerson.timeSick++ #Orig: timeSick++
            #Calculate child probs
            childProbs=np.zeros(2)
            childProbs[0]=curPerson.pDie*2 #Prob Background Mortality
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[0]): #Background Mortality
                curPerson.state=2 #Transition to Death
            #end Background Mortality
            else: #Survive
                #Calculate child probs
                childProbs=np.zeros(2)
                childProbs[1]=childProbs[0]+curPerson.pTreat #Prob treated
                #Sample event
                rand=np.random.rand()
                if(rand<childProbs[1]): #treated
                    curPerson.state=5 #Transition to 1stTreated
                #end treated
                else: #1stPD
                    curPerson.state=1 #Transition to 1stPD
                #end 1stPD
            #end Survive
        elif(curState==2): #Death
            #Update rewards
            cycleCost+=0
            cycleQALY+=0
            #Calculate child probs
            childProbs=np.zeros(1)
            childProbs[0]=1.0 #Prob Death
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[0]): #Death
                curPerson.state=2 #Transition to Death
            #end Death
        elif(curState==3): #2ndSD
            #Update rewards
            cycleCost+=fx.ifElse(curPerson.timeChemo>=1,curPerson.mCSD+curPerson.mtreatCost_Chemo,curPerson.mCSD)
            cycleQALY+=curPerson.mSDQ
            #Calculate child probs
            childProbs=np.zeros(2)
            childProbs[1]=childProbs[0]+curPerson.pDie #Prob Backrgound Mortality
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[1]): #Backrgound Mortality
                curPerson.state=2 #Transition to Death
            #end Backrgound Mortality
            else: #Survive
                #Calculate child probs
                childProbs=np.zeros(2)
                childProbs[1]=childProbs[0]+curPerson.pProg #Prob 2ndPD
                #Sample event
                rand=np.random.rand()
                if(rand<childProbs[1]): #2ndPD
                    curPerson.state=4 #Transition to 2ndPD
                #end 2ndPD
                else: #2ndSD
                    curPerson.state=3 #Transition to 2ndSD
                #end 2ndSD
            #end Survive
        elif(curState==4): #2ndPD
            #Update rewards
            cycleCost+=fx.ifElse(curPerson.timeChemo>=1,curPerson.mCPD+curPerson.mtreatCost_Chemo,curPerson.mCPD)
            cycleQALY+=curPerson.mPDQ
            #Update variables
            curPerson.timeSick++ #Orig: timeSick++
            #Calculate child probs
            childProbs=np.zeros(2)
            childProbs[1]=childProbs[0]+curPerson.pDie*2 #Prob Background Mortality
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[1]): #Background Mortality
                curPerson.state=2 #Transition to Death
            #end Background Mortality
            else: #Survive
                #Calculate child probs
                childProbs=np.zeros(2)
                childProbs[1]=childProbs[0]+curPerson.pTreat*0.8 #Prob treated
                #Sample event
                rand=np.random.rand()
                if(rand<childProbs[1]): #treated
                    curPerson.state=6 #Transition to 2ndTreated
                #end treated
                else: #notTreated
                    curPerson.state=4 #Transition to 2ndPD
                #end notTreated
            #end Survive
        elif(curState==5): #1stTreated
            #Update rewards
            cycleCost+=curPerson.mtreatCost_Chemo+curPerson.mtreatCost_Surgery
            cycleQALY+=0
            #Update variables
            curPerson.timeChemo++ #Orig: timeChemo++
            #Calculate child probs
            childProbs=np.zeros(2)
            childProbs[1]=childProbs[0]+curPerson.pResponse_2 #Prob Probability of response
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[1]): #Probability of response
                curPerson.state=3 #Transition to 2ndSD
            #end Probability of response
            else: #Non response
                curPerson.state=1 #Transition to 1stPD
            #end Non response
        elif(curState==6): #2ndTreated
            #Update rewards
            cycleCost+=curPerson.mtreatCost_Chemo
            cycleQALY+=0
            #Update variables
            curPerson.timeChemo++ #Orig: timeChemo++
            #Calculate child probs
            childProbs=np.zeros(2)
            childProbs[1]=childProbs[0]+curPerson.pResponse_2*(2/3) #Prob Probability of Response
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[1]): #Probability of Response
                curPerson.state=3 #Transition to 2ndSD
            #end Probability of Response
            else: #Nonresponse
                curPerson.state=4 #Transition to 2ndPD
            #end Nonresponse
    #end person foor loop
    
    #Update outcomes
    discount=1.0
    if(t>=startDiscountCycle): discount=1/((1+discountRates[0])**(t-startDiscountCycle+1))
    cycleCost_dis=cycleCost*discount
    if(t==0 and halfCycle): #half-cycle correction
        cycleCost*=0.5
        cycleCost_dis*=0.5
    mFFX_Cost+=cycleCost
    mFFX_Dis_Cost+=cycleCost_dis
    discount=1.0
    if(t>=startDiscountCycle): discount=1/((1+discountRates[1])**(t-startDiscountCycle+1))
    cycleQALY_dis=cycleQALY*discount
    if(t==0 and halfCycle): #half-cycle correction
        cycleQALY*=0.5
        cycleQALY_dis*=0.5
    mFFX_QALY+=cycleQALY
    mFFX_Dis_QALY+=cycleQALY_dis
    
    #Update trace
    trace.update(prev, cycleCost, cycleCost_dis, cycleQALY, cycleQALY_dis)
    
    #Check termination condition
    terminate = (t==10)
    if(terminate and halfCycle): #half cycle-correction, update last trace row
        trace.applyHalfCycle()
        #Update cum rewards
        mFFX_Cost-=cycleCost*0.5;
        mFFX_Dis_Cost-=cycleCost_dis*0.5;
        mFFX_QALY-=cycleQALY*0.5;
        mFFX_Dis_QALY-=cycleQALY_dis*0.5;
    
    t+=1 #next cycle
    
#end cycle while loop
trace.writeCSV() #write trace
print("done!",sep="")

#Report totals
print("Cost:",mFFX_Cost)
print("Cost (Discounted):",mFFX_Dis_Cost)
print("QALY:",mFFX_QALY)
print("QALY (Discounted):",mFFX_Dis_QALY)
print("")

########## Markov Chain: GnP ##########
print("Running Markov Chain: GnP ")
np.random.seed(999) #seed RNG
numStates=7
stateNames=["1stSD","1stPD","Death","2ndSD","2ndPD","1stTreated","2ndTreated"]
trace=MarkovTrace("GnP",stateNames) #initialize trace

#Initialize prevalence
initPrev=[0.15,0.85,0,0,0,0,0]
cumPrev=np.zeros(numStates)
cumPrev[0]=initPrev[0]
for s in range(1,numStates):
    cumPrev[s]=cumPrev[s-1]+initPrev[s]

numPeople=1000
people=[Person() for i in range(numPeople)]
for p in range(0,numPeople):
    curPerson=people[p]
    rand=np.random.rand()
    k=0
    while(rand>initPrev[k]): k+=1
    people[p].state=k
    #Initialize variables
    people[p].timeSick=0
    people[p].timeChemo=0
    people[p].pProg=0.1
    people[p].pDie=0.05
    people[p].pTreat=0.7
    people[p].pResponse=0.6
    people[p].mSDQ=(Unif(0.3,0.7,~)/12
    people[p].mPDQ=(Unif(0,0.15,~)/12
    people[p].mCSD=(Unif(1000000,2000000,~)/12
    people[p].mCPD=(Unif(2500000,4000000,~)/12
    people[p].mtreatCost_Chemo=1000000
    people[p].mtreatCost_Surgery=3500000
    people[p].pProg3=0.05
    people[p].pDie3=0.015
    people[p].mtreatCost_Chemo_3=40000000
    people[p].pResponse_3=0.8
    people[p].pResponse_2=0.4

#Run chain
#Initialize outcomes
GnP_Cost=0
GnP_Dis_Cost=0
GnP_QALY=0
GnP_Dis_QALY=0
t=0 #initialize cycle
terminate=False
while(terminate==False):
    #update progress
    if(t%10==0): print(t,end="")
    else: print('.',end="")
    
    #Cycle outcomes
    prev=np.zeros(numStates)
    cycleCost=0
    cycleCost_dis=0
    cycleQALY=0
    cycleQALY_dis=0
    
    #Update each person
    for p in range(0,numPeople):
        curPerson=people[p]
        curState=curPerson.state
        prev[curState]+=1 #record prevalence
        if(curState==0): #1stSD
            #Update rewards
            cycleCost+=0
            cycleQALY+=curPerson.mSDQ
            #Calculate child probs
            childProbs=np.zeros(3)
            childProbs[1]=childProbs[0]+curPerson.pDie3 #Prob Background Mortality
            childProbs[2]=childProbs[1]+curPerson.pProg3 #Prob PD
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[1]): #Background Mortality
                curPerson.state=2 #Transition to Death
            #end Background Mortality
            elif(rand<childProbs[2]): #PD
                curPerson.state=1 #Transition to 1stPD
            #end PD
            else: #SD
                curPerson.state=0 #Transition to 1stSD
            #end SD
        elif(curState==1): #1stPD
            #Update rewards
            cycleCost+=fx.ifElse(curPerson.timeChemo>=1,curPerson.mCPD+curPerson.mtreatCost_Chemo,curPerson.mCPD)
            cycleQALY+=curPerson.mPDQ
            #Update variables
            curPerson.timeSick++ #Orig: timeSick++
            #Calculate child probs
            childProbs=np.zeros(2)
            childProbs[0]=curPerson.pDie3*1.5 #Prob Background Mortality
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[0]): #Background Mortality
                curPerson.state=2 #Transition to Death
            #end Background Mortality
            else: #Survive
                #Calculate child probs
                childProbs=np.zeros(2)
                childProbs[1]=childProbs[0]+curPerson.pTreat #Prob treated
                #Sample event
                rand=np.random.rand()
                if(rand<childProbs[1]): #treated
                    curPerson.state=5 #Transition to 1stTreated
                #end treated
                else: #1stPD
                    curPerson.state=1 #Transition to 1stPD
                #end 1stPD
            #end Survive
        elif(curState==2): #Death
            #Update rewards
            cycleCost+=0
            cycleQALY+=0
            #Calculate child probs
            childProbs=np.zeros(1)
            childProbs[0]=1.0 #Prob Death
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[0]): #Death
                curPerson.state=2 #Transition to Death
            #end Death
        elif(curState==3): #2ndSD
            #Update rewards
            cycleCost+=fx.ifElse(curPerson.timeChemo>=1,curPerson.mCSD+curPerson.mtreatCost_Chemo,curPerson.mCSD)
            cycleQALY+=curPerson.mSDQ
            #Calculate child probs
            childProbs=np.zeros(2)
            childProbs[1]=childProbs[0]+curPerson.pDie3 #Prob Backrgound Mortality
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[1]): #Backrgound Mortality
                curPerson.state=2 #Transition to Death
            #end Backrgound Mortality
            else: #Survive
                #Calculate child probs
                childProbs=np.zeros(2)
                childProbs[1]=childProbs[0]+curPerson.pProg3 #Prob 2ndPD
                #Sample event
                rand=np.random.rand()
                if(rand<childProbs[1]): #2ndPD
                    curPerson.state=4 #Transition to 2ndPD
                #end 2ndPD
                else: #2ndSD
                    curPerson.state=3 #Transition to 2ndSD
                #end 2ndSD
            #end Survive
        elif(curState==4): #2ndPD
            #Update rewards
            cycleCost+=fx.ifElse(curPerson.timeChemo>=1,curPerson.mCPD+curPerson.mtreatCost_Chemo,curPerson.mCPD)
            cycleQALY+=curPerson.mPDQ
            #Update variables
            curPerson.timeSick++ #Orig: timeSick++
            #Calculate child probs
            childProbs=np.zeros(2)
            childProbs[1]=childProbs[0]+curPerson.pDie3*2 #Prob Background Mortality
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[1]): #Background Mortality
                curPerson.state=2 #Transition to Death
            #end Background Mortality
            else: #Survive
                #Calculate child probs
                childProbs=np.zeros(2)
                childProbs[1]=childProbs[0]+curPerson.pTreat-0.2 #Prob treated
                #Sample event
                rand=np.random.rand()
                if(rand<childProbs[1]): #treated
                    curPerson.state=6 #Transition to 2ndTreated
                #end treated
                else: #notTreated
                    curPerson.state=4 #Transition to 2ndPD
                #end notTreated
            #end Survive
        elif(curState==5): #1stTreated
            #Update rewards
            cycleCost+=curPerson.mtreatCost_Chemo_3+curPerson.mtreatCost_Surgery
            cycleQALY+=0
            #Update variables
            curPerson.timeChemo++ #Orig: timeChemo++
            #Calculate child probs
            childProbs=np.zeros(2)
            childProbs[1]=childProbs[0]+curPerson.pResponse_3 #Prob Probability of response
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[1]): #Probability of response
                curPerson.state=3 #Transition to 2ndSD
            #end Probability of response
            else: #Non response
                curPerson.state=1 #Transition to 1stPD
            #end Non response
        elif(curState==6): #2ndTreated
            #Update rewards
            cycleCost+=curPerson.mtreatCost_Chemo_3
            cycleQALY+=0
            #Update variables
            curPerson.timeChemo++ #Orig: timeChemo++
            #Calculate child probs
            childProbs=np.zeros(2)
            childProbs[1]=childProbs[0]+curPerson.pResponse_3 #Prob Probability of Response
            #Sample event
            rand=np.random.rand()
            if(rand<childProbs[1]): #Probability of Response
                curPerson.state=3 #Transition to 2ndSD
            #end Probability of Response
            else: #Nonresponse
                curPerson.state=4 #Transition to 2ndPD
            #end Nonresponse
    #end person foor loop
    
    #Update outcomes
    discount=1.0
    if(t>=startDiscountCycle): discount=1/((1+discountRates[0])**(t-startDiscountCycle+1))
    cycleCost_dis=cycleCost*discount
    if(t==0 and halfCycle): #half-cycle correction
        cycleCost*=0.5
        cycleCost_dis*=0.5
    GnP_Cost+=cycleCost
    GnP_Dis_Cost+=cycleCost_dis
    discount=1.0
    if(t>=startDiscountCycle): discount=1/((1+discountRates[1])**(t-startDiscountCycle+1))
    cycleQALY_dis=cycleQALY*discount
    if(t==0 and halfCycle): #half-cycle correction
        cycleQALY*=0.5
        cycleQALY_dis*=0.5
    GnP_QALY+=cycleQALY
    GnP_Dis_QALY+=cycleQALY_dis
    
    #Update trace
    trace.update(prev, cycleCost, cycleCost_dis, cycleQALY, cycleQALY_dis)
    
    #Check termination condition
    terminate = (t==10)
    if(terminate and halfCycle): #half cycle-correction, update last trace row
        trace.applyHalfCycle()
        #Update cum rewards
        GnP_Cost-=cycleCost*0.5;
        GnP_Dis_Cost-=cycleCost_dis*0.5;
        GnP_QALY-=cycleQALY*0.5;
        GnP_Dis_QALY-=cycleQALY_dis*0.5;
    
    t+=1 #next cycle
    
#end cycle while loop
trace.writeCSV() #write trace
print("done!",sep="")

#Report totals
print("Cost:",GnP_Cost)
print("Cost (Discounted):",GnP_Dis_Cost)
print("QALY:",GnP_QALY)
print("QALY (Discounted):",GnP_Dis_QALY)
print("")

